apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    defaultConfig {
        applicationId "io.github.hidroh.tldroid"
        minSdkVersion 14
        targetSdkVersion 30
        versionCode 10
        versionName "1.6"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        resConfigs "en"
        vectorDrawables.useSupportLibrary true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            minifyEnabled false
//            useProguard false
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }

    buildFeatures {
        dataBinding = true
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
                exceptionFormat 'full'
            }
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    lintOptions {
        htmlReport false
        xmlReport false
        textReport true
        warningsAsErrors true
        abortOnError true
        informational 'InvalidPackage', // https://github.com/square/okio/issues/58
                'UnusedResources' // https://youtrack.jetbrains.com/issue/KT-7729
        explainIssues false
        absolutePaths false
    }

    // espresso-web
    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }
}

dependencies {
    implementation 'com.google.android.material:material:1.2.1',
            'androidx.constraintlayout:constraintlayout:2.0.4',
            'com.github.rjeschke:txtmark:0.13',
            'com.squareup.moshi:moshi-kotlin:1.11.0',
            'com.squareup.okio:okio:3.0.0-alpha.1',
            "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}",
            'androidx.preference:preference-ktx:1.1.1'
    kapt 'androidx.databinding:databinding-compiler:4.1.1'
    testImplementation 'junit:junit:4.13.1',
            'org.mockito:mockito-core:1.10.19',
            'org.powermock:powermock-module-junit4:1.6.6',
            'org.powermock:powermock-api-mockito:1.6.6',
            'org.assertj:assertj-core:3.18.1', // test against android.jar which uses JDK6
            'com.squareup.okhttp3:mockwebserver:4.9.0'
    androidTestImplementation 'org.assertj:assertj-core:3.18.1',
            'androidx.annotation:annotation:1.1.0',
            'androidx.test.ext:junit:1.1.2',
            'androidx.test:rules:1.3.0',
            'androidx.test.espresso:espresso-core:3.3.0',
            'androidx.test.espresso:espresso-idling-resource:3.3.0',
            'androidx.test.espresso:espresso-intents:3.3.0',
            'androidx.test.espresso:espresso-web:3.3.0'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedAndroidTest', 'testDebugUnitTest']) {
    getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
    classDirectories.setFrom(fileTree(
            dir: "${buildDir}/intermediates/classes/debug",
            exclude: ['**/R.class', '**/R$*.class', '**/databinding/**']
    ))
    getExecutionData().setFrom(fileTree(
            dir: "${buildDir}",
            include: ['**/*.exec', '**/*.ec']
    ))
    reports {
        html.destination file("${buildDir}/reports/jacoco/html")
    }
    doLast {
        println "jacoco report generated to file://${reports.html.destination}/index.html"
    }
}
